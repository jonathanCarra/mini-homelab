---
- name: Ensure systemd-resolved is started and enabled
  ansible.builtin.systemd:
    name: systemd-resolved
    state: started
    enabled: true

- name: Update apt cache
  become: true
  ansible.builtin.apt:
    update_cache: true
    upgrade: dist
    cache_valid_time: 3600

- name: Install Dependencies
  become: true
  ansible.builtin.apt:
    name: "{{ item }}"
    state: present
  loop:
    - curl
    - net-tools
    - nginx

- name: Send utils directory
  ansible.builtin.copy:
    dest: /srv/utils/
    src: ./utils/
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    mode: '0644'
  register: send

- name: Copy utils directory
  ansible.builtin.copy:
    remote_src: true
    dest: /srv/current/
    src: /srv/utils/
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    mode: '0644'
  when: send.changed

- name: Add hostname in compose.yml
  ansible.builtin.replace:
    path: /srv/current/compose.yml
    regexp: 'HOST_ANSIBLE'
    replace: '{{ ansible_host }}'
  when:
    - ansible_cert_domain is undefined
    - send.changed

- name: Add hostname in compose.yml
  ansible.builtin.replace:
    path: /srv/current/compose.yml
    regexp: 'HOST_ANSIBLE'
    replace: '{{ ansible_cert_domain }}'
  when:
    - ansible_cert_domain is defined
    - send.changed

- name: Set local.conf from without_domain
  ansible.builtin.copy:
    remote_src: true
    src: /srv/current/nginx/local_WITHOUT_DOMAIN.conf
    dest: /srv/current/nginx/local.conf
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    mode: '0644'
  when: ansible_cert_domain is undefined

- name: Set files from with_domain
  ansible.builtin.copy:
    remote_src: true
    src: /srv/current/nginx/local_WITH_DOMAIN.conf
    dest: /srv/current/nginx/local.conf
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    mode: '0644'
  when: ansible_cert_domain is defined

- name: Add domain in local.conf
  ansible.builtin.replace:
    path: /srv/current/nginx/local.conf
    regexp: ANSIBLE_DOMAIN
    replace: '{{ ansible_cert_domain }}'
  when:
    - ansible_cert_domain is defined
    - send.changed

- name: Add hostname in local.conf
  ansible.builtin.replace:
    path: /srv/current/nginx/local.conf
    regexp: 'HOST_ANSIBLE'
    replace: '{{ ansible_host }}'
  when: send.changed

- name: Create cert directory
  ansible.builtin.file:
    path: "/srv/cert/"
    state: directory
    mode: '0644'

# Création d'un certificat SSL autosigné si aucun domaine n'est fournis
- name: Create the private key
  community.crypto.openssl_privatekey:
    path: "/srv/cert/key.pem"
    size: 4096
  when: ansible_cert_domain is undefined

- name: Generate a Self Signed OpenSSL certificate
  openssl_certificate:
    path: "/srv/cert/cert.pem"
    privatekey_path: "/srv/cert/key.pem"
    provider: selfsigned
  when: ansible_cert_domain is undefined

- name: Install certbot
  community.general.snap:
    name: certbot
    classic: true
  when: ansible_cert_domain is defined

- name: Prepare the Certbot command
  ansible.builtin.file:
    src: /snap/bin/certbot
    dest: /usr/bin/certbot
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    state: link
  when: ansible_cert_domain is defined

- name: Get a certbot certificate
  ansible.builtin.command: "certbot certonly --nginx --non-interactive --agree-tos -d {{ ansible_cert_domain }} -m {{ ansible_cert_email }}"
  when: ansible_cert_domain is defined

- name: Remove unused dependencies
  become: true
  ansible.builtin.apt:
    name: "{{ item }}"
    state: absent
  loop:
    - nginx
