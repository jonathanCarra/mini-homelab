---
- name: Docker Installation
  tags: docker
  block:
    - name: Create directory for Docker's GPG key
      ansible.builtin.file:
        path: /etc/apt/keyrings
        state: directory
        mode: '0755'

    - name: Add Docker's official GPG key
      ansible.builtin.apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        keyring: /etc/apt/keyrings/docker.gpg
        state: present

    - name: Print architecture variables
      ansible.builtin.debug:
        msg: "Architecture: {{ ansible_architecture }}, Codename: {{ ansible_lsb.codename }}"

    - name: Add Docker repository
      ansible.builtin.apt_repository:
        repo: >-
          deb [arch={{ arch_mapping[ansible_architecture] | default(ansible_architecture) }}
          signed-by=/etc/apt/keyrings/docker.gpg]
          https://download.docker.com/linux/ubuntu {{ ansible_lsb.codename }} stable
        filename: docker
        state: present

    - name: Install Docker and related packages
      ansible.builtin.apt:
        state: present
        update_cache: true
        name:
          - docker-ce
          - docker-ce-cli
          - containerd.io
          - docker-buildx-plugin
          - docker-compose-plugin

    - name: Add Docker group
      ansible.builtin.group:
        name: docker
        state: present

    - name: Add user to Docker group
      ansible.builtin.user:
        name: "{{ ansible_user }}"
        groups: docker
        append: true

    - name: Enable and start Docker services
      ansible.builtin.systemd:
        name: "{{ item }}"
        enabled: true
        state: started
      loop:
        - docker.service
        - containerd.service

    - name: Ensure Docker-compose is installed
      ansible.builtin.package:
        name: docker-compose
        state: present

    - name: Down existing services
      community.docker.docker_compose_v2:
        project_src: "/srv/current/"
        state: absent

    - name: Create Jellyfin directory
      ansible.builtin.file:
        path: "/srv/Jellyfin/"
        state: directory
        mode: '0644'
      register: jellyfin_dir

    - name: Create filebrowser directory
      ansible.builtin.file:
        path: "/srv/filebrowser/"
        state: directory
        mode: '0644'
      register: filebrowser_dir

    - name: Get process with needed port
      ansible.builtin.command: "lsof -t -i:{{ item }}"
      register: process_using_port
      changed_when: process_using_port.rc == 0
      failed_when: process_using_port.stderr != ''
      loop:
        - 80
        - 443
        - 8086
        - 8087
        - 8088
        - 8089

    - name: Kill process with needed port
      ansible.builtin.command: "kill {{ item.stdout }}"
      when: item.stdout != ""
      register: kill_process
      changed_when: kill_process.rc == 0
      loop: "{{ process_using_port.results }}"

    - name: Create and start services
      community.docker.docker_compose_v2:
        project_src: "/srv/current/"

    - name: Startup Jellyfin
      ansible.builtin.shell: |
        until grep 'Startup complete' <(docker compose --project-directory /srv/current logs jellyfin)
        do
          sleep 2
        done

        curl "http://localhost:8096/Startup/Configuration" -H 'Content-Type: application/json' --data-raw '{"UICulture":"fr","MetadataCountryCode":"FR","PreferredMetadataLanguage":"fr"}'
        curl "http://localhost:8096/Startup/User"
        curl "http://localhost:8096/Startup/User" -H 'Content-Type: application/json' --data-raw '{"Name":"admin","Password":"admin"}'
        curl "http://localhost:8096/Library/VirtualFolders?collectionType=movies&refreshLibrary=false&name=Movies" -H 'Content-Type: application/json' --data-raw '{"LibraryOptions":{"EnableArchiveMediaFiles":false,"EnablePhotos":true,"EnableRealtimeMonitor":true,"ExtractChapterImagesDuringLibraryScan":false,"EnableChapterImageExtraction":false,"DownloadImagesInAdvance":false,"EnableInternetProviders":true,"ImportMissingEpisodes":false,"SaveLocalMetadata":false,"EnableAutomaticSeriesGrouping":false,"PreferredMetadataLanguage":"","MetadataCountryCode":"","SeasonZeroDisplayName":"Specials","AutomaticRefreshIntervalDays":0,"EnableEmbeddedTitles":false,"EnableEmbeddedEpisodeInfos":false,"SkipSubtitlesIfEmbeddedSubtitlesPresent":false,"SkipSubtitlesIfAudioTrackMatches":false,"SaveSubtitlesWithMedia":true,"RequirePerfectSubtitleMatch":true,"MetadataSavers":[],"TypeOptions":[{"Type":"Movie","MetadataFetchers":["TheMovieDb","The Open Movie Database"],"MetadataFetcherOrder":["TheMovieDb","The Open Movie Database"],"ImageFetchers":["TheMovieDb","The Open Movie Database","Screen Grabber"],"ImageFetcherOrder":["TheMovieDb","The Open Movie Database","Screen Grabber"]}],"LocalMetadataReaderOrder":["Nfo"],"SubtitleDownloadLanguages":[],"DisabledSubtitleFetchers":[],"SubtitleFetcherOrder":[],"PathInfos":[{"Path":"/media"}]}}'
        curl "http://localhost:8096/Startup/Configuration" -H 'Content-Type: application/json' --data-raw '{"UICulture":"fr","MetadataCountryCode":"FR","PreferredMetadataLanguage":"fr"}'
        curl "http://localhost:8096/Startup/RemoteAccess" -H 'Content-Type: application/json' --data-raw '{"EnableRemoteAccess":true,"EnableAutomaticPortMapping":false}'
        curl "http://localhost:8096/Startup/Complete" -X 'POST'

        until grep 'Analyser la médiathèque Completed' <(docker compose --project-directory /srv/current logs jellyfin)
        do
          sleep 2
        done
      args:
        executable: /bin/bash
      when: jellyfin_dir.changed

    - name: Change Base URL for Jellyfin
      ansible.builtin.replace:
        path: /srv/Jellyfin/config/config/network.xml
        regexp: '<BaseUrl */>'
        replace: '<BaseUrl>/jellyfin</BaseUrl>'
      when: jellyfin_dir.changed

    - name: Change Base URL for FileBrowser
      ansible.builtin.replace:
        path: /srv/filebrowser/config/settings.json
        regexp: 'baseURL.*$'
        replace: 'baseURL": "/filebrowser",'
      when: filebrowser_dir.changed

    - name: Stop services
      community.docker.docker_compose_v2:
        project_src: "/srv/current/"
        state: absent

    - name: Restart services
      community.docker.docker_compose_v2:
        project_src: "/srv/current/"
